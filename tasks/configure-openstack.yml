---
# roles/microk8s/tasks/configure-openstack.yml
# https://github.com/kubernetes/cloud-provider-openstack/tree/master/charts/cinder-csi-plugin
# https://github.com/kubernetes/cloud-provider-openstack/blob/master/docs/cinder-csi-plugin/using-cinder-csi-plugin.md
#
- name: openstack cloud provider
  become: false
  run_once: "{{run_once}}"
  block:
    - name: openstack cloud provider settings
      ansible.builtin.shell:
        cmd: |
          cat <<EOT |{{kubectl}} apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cloud-provider-openstack
          ---
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: cloud-config
            namespace: cloud-provider-openstack
          stringData:
            cloud-config: |
              {{lookup('template','openstack-cloud.conf.j2') |indent(4)}}
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: cacert
            namespace: cloud-provider-openstack
          data:
            ca-bundle.crt: |
              {{microk8s_openstack_cloud_conf.ca_bundle_crt |indent(4)}}
          EOT
        executable: /bin/bash
      register: kubectl_apply_openstack
      delegate_to: "{{delegate_to}}"
      changed_when: kubectl_apply_openstack.stdout_lines |reject('search','unchanged') |list |length >0

    - name: openstack cloud provider charts
      kubernetes.core.helm_repository:
        binary_path: "{{helm}}"
        repo_name: cpo
        repo_state: present
        repo_url: https://kubernetes.github.io/cloud-provider-openstack
      delegate_to: "{{delegate_to}}"

    - name: openstack cinder csi
      kubernetes.core.helm:
        binary_path: "{{helm}}"
        chart_ref: cpo/openstack-cinder-csi
        #chart_version: ""
        create_namespace: true
        release_name: cinder-csi
        release_namespace: cloud-provider-openstack
        release_state: present
        release_values:
          csi:
            plugin:
              volumes:
                - name: cacert
                  configMap:
                    name: cacert
          secret:
            enabled: true
            name: cloud-config
          storageClass:
            custom: |-
              ---
              apiVersion: storage.k8s.io/v1
              kind: StorageClass
              metadata:
                name: csi-cinder-sc-retain-wffc
              provisioner: cinder.csi.openstack.org
              reclaimPolicy: Retain
              volumeBindingMode: WaitForFirstConsumer
              allowVolumeExpansion: true
      delegate_to: "{{delegate_to}}"
      when:
        - microk8s_openstack_cinder_enabled


# MetalLB OpenStack configuration to allow layer 2 VRRP
# Enable local firewall on each microk8s host
# Disable OpenStack port security on each microk8s host
#
- name: MetalLB setup for OpenStack
  when:
    - microk8s_features |select("match","^metallb") |list |length >0
  block:
    - name: ufw allow OpenSSH
      community.general.ufw:
        name: OpenSSH
        rule: allow

    - name: ufw allow services
      community.general.ufw:
        direction: "{{ item.direction |default('in') }}"
        from_ip: "{{ item.from_ip |default('any') }}"
        proto: "{{ item.proto |default('tcp') }}"
        rule: "{{ item.rule |default('allow') }}"
        to_ip: "{{ item.to_ip |default('any') }}"
        to_port: "{{ item.to_port |default('any') }}"
      with_items:
        - "{{firewall_rules|default([])}}"

    - name: ufw whitelist k8s nodes
      community.general.ufw:
        comment: k8s nodes whitelist
        from_ip: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
        insert: "{{ host_idx +1 }}"
        rule: allow
      loop: "{{ ansible_play_hosts }}"
      loop_control:
        index_var: host_idx
    - name: ufw DEFAULT_FORWARD_POLICY
      ansible.builtin.lineinfile:
        line: DEFAULT_FORWARD_POLICY="ACCEPT"
        path: /etc/default/ufw
        regexp: "^DEFAULT_FORWARD_POLICY="
        state: present
      notify:
        - reload ufw

    # sudo ufw allow in on vxlan.calico && sudo ufw allow out on vxlan.calico
    # sudo ufw allow in on cali+ && sudo ufw allow out on cali+
    - name: ufw Calico rules
      community.general.ufw:
        direction: "{{ item.direction }}"
        interface: "{{ item.interface }}"
        rule: allow
      with_items:
        - { direction: in, interface: "vxlan.calico" }
        - { direction: out, interface: "vxlan.calico" }
        - { direction: in, interface: "cali+" }
        - { direction: out, interface: "cali+" }

    - name: firewall enable
      community.general.ufw:
        state: enabled

    - name: MetalLB disable openstack port security
      become: false
      ansible.builtin.shell:
        cmd: |
          OPENSTACK="openstack --os-cloud {{cloud}}"
          [[ $($OPENSTACK port show -f value -c port_security_enabled {{inventory_hostname}} 2>/dev/null) == 'False' ]] && exit 0
          $OPENSTACK port set \
          --no-security-group \
          --no-allowed-address \
          --disable-port-security \
          {{ inventory_hostname }} && echo 'CHANGED'
        executable: /bin/bash
      register: os_port_sec
      delegate_to: localhost
      changed_when:
        - os_port_sec.stdout == "CHANGED"

    - name: OpenStack MetalLB enabled
      become: false
      run_once: true
      block:
        - name: MetalLB ports
          local_action:
            module: openstack.cloud.port
            cloud: "{{cloud}}"
            name: metallb-{{item}}.{{ansible_domain}}
            network: "{{os_stack_name}}"
            no_security_groups: true
            port_security_enabled: false
            state: present
          loop: "{{ query('sequence','start=0 end=4') }}"

        - name: MetalLB port tags
          ansible.builtin.shell:
            cmd: |
              PORT="metallb-{{item}}.{{ansible_domain}}"
              NETWORK="{{os_stack_name}}"
              OPENSTACK="openstack --os-cloud {{cloud}}"
              [[ $($OPENSTACK port list -f json --network $NETWORK --name $PORT --tags metallb) == '[]' ]] || exit 0
              $OPENSTACK port set --tag metallb $PORT && echo "CHANGED"
            executable: /bin/bash
          register: port_tag
          loop: "{{ query('sequence','start=0 end=4') }}"
          changed_when:
            - port_tag.stdout == "CHANGED"
          delegate_to: localhost

        - name: MetalLB floating IP
          ansible.builtin.shell:
            cmd: |
              OPENSTACK="openstack --os-cloud {{cloud}}"
              [[ $($OPENSTACK floating ip list -f json --port metallb-{{item}}.{{ansible_domain}}) == '[]' ]] || exit 0
              $OPENSTACK floating ip create \
              --port metallb-{{item}}.{{ansible_domain}} \
              --description "metallb-{{item}}.{{ansible_domain}}" \
              --tag metallb \
              {{network_external |quote}} && echo "CHANGED"
            executable: /bin/bash
          register: floating_ip
          changed_when:
            - floating_ip.stdout == "CHANGED"
          loop: "{{ query('sequence','start=0 end=4') }}"
          delegate_to: localhost
          run_once: true

        - name: MetalLB floating ip list
          local_action:
            module: ansible.builtin.shell
            cmd: |
              OPENSTACK="openstack --os-cloud={{cloud}}"
              $OPENSTACK floating ip list -f json --tags metallb
          register: metallb_floating_ips
          changed_when: false

    - name: MetalLB IP ranges?
      ansible.builtin.set_fact:
        microk8s_metallb_ip_ranges: "{{ (metallb_floating_ips.stdout |from_json) |
                                        map(attribute='Fixed IP Address') |
                                        map('regex_replace','^(.*)$','\\1/32') |list }}"

